Title: Astral Pathfinder
Current Version: 0.1
Repo: https://github.com/LoganTHarvell/Astral-Pathfinder

Platform: MacOS Binary, developed in Xcode
Language: C++
Frameworks: SDL2, SDL2_Image

Genre: Top-down 2D Space Sim
Setting: Space/Future

Description:
  A simple space colonization game inspired by the classic resource management game called Hammurabi. Set in a random galaxy of the universe, the player is an inhabitant of a world no longer able to support a growing population. In the efforts of the Hegemony to save society from collapse, the Hegemony used the last of its resources to create a vessel capable of traversing the stars. Named the Astral Pathfinder, the player has been called upon to serve as Captain, placing the responsibility of society's future in their hands. The Captain must discover new worlds, colonize them, and manage the resources of this new interplanetary civilization.

UI:
  => Map
    - Cursor selects planets
    - Arrow keys control ship

  => Current planet info
    - Displays planet info when a ship collides with a planet on the map

  => Selected planet info
    - Displays planet info when a player hovers the cursor over a planet

  => Dialogue box
    - Displays dialog to player during events

Gameplay:
  => Exploration
    - Planets
      > Galaxy contains fixed number of planets
      > Planets can be undiscovered, discovered, colonized (state machine)
        + Undiscovered planets can't be selected
        + Discovered planets become colonized if population is > 0, vice versa
    - Ship
      > Ship has fixed population
      > Movement on the map consumes fuel
      > Move ship around the map to visit each planet
      > Ship population temporarily added to planet when landed
      > Ship must be on planet to receive minerals for fuel

  => Resource Management
    - Population
      > Planet max population limited by infrastructure, uniformly set on discovery
      > Planet birth and death rate dependant on excess food, slightly random
      > People consume fixed amount of food per frame
      > People produce fixed amount of food per frame
      > Player chooses ratio of farmers to miners per planet
      > Player chooses ratio of minerals (mined deposits) used for infrastructure
    - Food
      > Planet has fixed max food production per frame, randomly set
    - Deposits
      > Planet has fixed total deposits that can be mined, randomly set
      > Miners turn deposits into usable minerals, which can be used as fuel
      > Minerals can be used to build infrastructure and raise max population limit

  => Random Events
    - Random events affect food, mining, births, deaths

  => Alien Warship
    - Alien warship roams and can potentially wipe planet population

  => Endgame:
    - Maximizing population gives score
    - Discover all planets, "win condition" bonus?
    - Run out of fuel in space
    - Run out of fuel on planet with no deposits
    - Ship collides with Alien Warship

AI:
  => Map generation
    - homeworld vs planet, resources

  => Population Growth

  => Random events
    - fair/balanced randomness

  => Alien Warship
    - basic pathfinding, decision making

Work Split (fluid):
  => Logan
    - Data structures
    - Game logic
  => Ian
    - UI
    - Graphics/Rendering
    - Movement
  => Both
    - AI
